basePath: /
definitions:
  dto.AccessTokenData:
    properties:
      claims:
        $ref: '#/definitions/dto.Claims'
      scope:
        items:
          type: string
        type: array
    type: object
  dto.ApiError:
    properties:
      detail:
        example: Some error details
        type: string
      status:
        example: 503
        type: integer
      title:
        example: err_code
        type: string
    type: object
  dto.BookCreateIn:
    properties:
      items:
        example: 46
        type: integer
      name:
        example: The Book of Eli
        type: string
    required:
    - items
    - name
    type: object
  dto.BookUpdateIn:
    properties:
      id:
        example: 24
        type: integer
      items:
        example: 46
        type: integer
      name:
        example: The Book of Eli
        type: string
    required:
    - items
    - name
    type: object
  dto.Claims:
    properties:
      rol:
        type: string
      sub:
        type: string
    type: object
  dto.UserCredIn:
    properties:
      password:
        example: secret
        type: string
      scope:
        example: web
        type: string
      username:
        example: mynickname
        type: string
    required:
    - password
    - scope
    - username
    type: object
  models.Book:
    properties:
      createdAt:
        example: "2021-03-12T02:11:03.292442-05:00"
        type: string
      id:
        example: 24
        type: integer
      items:
        example: 46
        type: integer
      name:
        example: The Book of Eli
        type: string
      updatedAt:
        example: "0001-01-01T00:00:00Z"
        type: string
    type: object
host: localhost:8080
info:
  contact:
    email: sample@mail.io
    name: Name Test
    url: http://contact.sample/text
  description: Api description shell project
  title: Shell Project
  version: "0.0"
paths:
  /auth/protected:
    get:
      description: This is a Bearer Token protected sample endpoint
      parameters:
      - default: Bearer <Add access token here>
        description: Insert access token
        in: header
        name: Authorization
        required: true
        type: string
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/dto.AccessTokenData'
        "401":
          description: err.unauthorized
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: err.generic
          schema:
            $ref: '#/definitions/dto.ApiError'
      security:
      - ApiKeyAuth: []
      summary: Sample protected endpoint
      tags:
      - Auth
  /auth/sisec:
    post:
      consumes:
      - multipart/form-data
      description: Try to make the authentication of the user credentials through
        the SISEC auth provider service
      parameters:
      - description: User Login Credential
        in: body
        name: credential
        required: true
        schema:
          $ref: '#/definitions/dto.UserCredIn'
      produces:
      - application/json
      responses:
        "202":
          description: Accepted
        "401":
          description: err.unauthorized
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: err.json_parse
          schema:
            $ref: '#/definitions/dto.ApiError'
        "504":
          description: err.network
          schema:
            $ref: '#/definitions/dto.ApiError'
      summary: Auth the user credential through SISEC
      tags:
      - Auth
  /books:
    get:
      description: Get the books in the repository
      produces:
      - application/json
      responses:
        "200":
          description: List of Books
          schema:
            items:
              $ref: '#/definitions/models.Book'
            type: array
        "500":
          description: err.repo_ops
          schema:
            $ref: '#/definitions/dto.ApiError'
      summary: Get Books
      tags:
      - Books
    post:
      consumes:
      - application/json
      description: Create a new book from the passed schema
      parameters:
      - description: Book Data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.BookCreateIn'
      produces:
      - application/json
      responses:
        "201":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "422":
          description: err.duplicate_key || Invalid schema
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: err.repo_ops || Internal error
          schema:
            $ref: '#/definitions/dto.ApiError'
      summary: Create a new book
      tags:
      - Books
  /books/{id}:
    delete:
      consumes:
      - application/json
      description: Deletes a Book by its Id
      parameters:
      - description: Book ID
        format: uint32
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "204":
          description: No Content
        "404":
          description: err.not_found
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: err.repo_ops
          schema:
            $ref: '#/definitions/dto.ApiError'
      summary: Delete a Book
      tags:
      - Books
    get:
      consumes:
      - application/json
      description: Get a book through its Id
      parameters:
      - description: Requested Book Id
        format: uint32
        in: path
        name: id
        required: true
        type: integer
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: err.not_found
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: Internal error
          schema:
            $ref: '#/definitions/dto.ApiError'
      summary: Get book by Id
      tags:
      - Books
    put:
      consumes:
      - application/json
      description: Update the book having the specified Id with the schema passed
        in the request body
      parameters:
      - description: Book ID
        format: uint32
        in: path
        name: id
        required: true
        type: integer
      - description: Book Data
        in: body
        name: book
        required: true
        schema:
          $ref: '#/definitions/dto.BookUpdateIn'
      produces:
      - application/json
      responses:
        "200":
          description: OK
          schema:
            $ref: '#/definitions/models.Book'
        "404":
          description: err.not_found
          schema:
            $ref: '#/definitions/dto.ApiError'
        "422":
          description: err.duplicate_key || Invalid schema
          schema:
            $ref: '#/definitions/dto.ApiError'
        "500":
          description: err.repo_ops || Internal error
          schema:
            $ref: '#/definitions/dto.ApiError'
      summary: Update the indicated book
      tags:
      - Books
swagger: "2.0"
